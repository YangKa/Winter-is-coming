##网络协议

###GET和POST

####请求
- GET请求：参数在地址后拼接，没有请求数据，不安全（因为所有参数都拼接在地址后面），不适合传输大量数据（长度有限制，为1024个字节）。
  GET提交、请求的数据会附在之后，即把数据放置在HTTP协议头<requestline>中。
  以？分割和传输数据，多个参数用&连接。如果数据是英文字母或数字，原样发送，
  如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密。

- POST请求：参数在请求数据区放着，相对GET请求更安全，并且数据大小没有限制。把提交的数据放置在HTTP包的包体<request-body>中.

- GET提交的数据会在地址栏显示出来，而POST提交，地址栏不会改变。

###TCP和UDP

- TCP是传输控制层协议，面向连接、可靠的、点到点的通信。
- UDP是用户数据报协议，非连接的、不可靠的的通信。
- TCP注重可靠传输，UDP侧重快速传输。

###Socket和HTTP

- HTTP协议是基于TCP连接的，是应用层协议，主要解决如何包装数据。
- HTTP是短连接，用于一次性请求，服务器响应后断开连接，节省资源。
- Socket是对TCP/IP协议的封装，Socket本地不是协议，而是一个调用接口.
- Socket是长连接，客户端和服务器可以双向通信，用于实时性场景。

##HTTP
- HTTP超文本传输协议，是短连接，是客户端主动发送请求，服务器做出响应，服务器响应之后，链接断开。HTTP是一个属于应用层面向对象的协议，HTTP有两类报文：请求报文和响应报文。

- HTTP请求报文：一个HTTP请求报文由请求行、请求头部、空行和请求数据4部分组成。
- HTTP响应报文：由三部分组成：状态行、消息报头、响应正文。

##HTTPS
- 安全超文本传输协议（Secure Hypertext Transfer Protocol），它是一个安全通信通道，基于HTTP开发，用于客户计算机和服务器之间交换信息，使用安全套结字层（SSI）进行信息交换，即HTTP的安全版。


##TCP
- TCP建立一个连接需要三次握手，终止一个连接却需要四次握手。

###TCP三次握手
第一步：C端向S端发送一个SYN（SYN=j）报文请求建立连接，并进入SYN_SEND状态。
第二步：S端收到SYN报文，回复一个SYN+ACK（SYN=j+1, ACK=k）报文，并进入SYN_RECV状态。
第三步：C端接收到S端的SYN报文，回复一个ACK（ACK=k+1）报文，进入ESTABLEISHED状态。

###TCP四次握手
第一步：某个应用进程首先调用close，称该端执行“主动关闭”（active close）。该端的TCP于是发送一个FIN分节，表示数据发送完毕。
第二步：接收到这个FIN的对端执行 “被动关闭”（passive close），这个FIN由TCP确认，回复一个ACK。
第三步：一段时间后，接收到这个文件结束符的应用进程将调用close关闭它的套接字。这导致它的TCP也发送一个FIN。
第四步：接收这个最终FIN的原发送端TCP（即执行主动关闭的那一端）确认这个FIN。

##Socket


###心跳