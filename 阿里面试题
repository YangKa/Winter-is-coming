1.dSYM你是如何分析的？

	dSYM文件是iOS编译后保存的`16进制函数地址映射信息`的文件，每次应用程序build后都会生成对应的xxx.app, xxx.app.dSYM文件。

	1.通过dwarfdump --uuid 找到xx.app、xx.app.dSYM文件的uuid，同时在xx.crash日志的Binary Images：中的第一行尖括号内找到uuid。然后将三个文件置于同一文件夹下。
	2.通过symbolicatecrash分析crash文件，将crash文件中的16进制地址转换成可读的函数地址。
	命令格式如下：
	[symbolicatecrash路径] [crash日志路径]  [dSYM文件路] > [outputFileName].crash

2.多线程有哪几种？你更倾向于哪一种？
	NSThread
	NSOperation
	GCD
3.单例弊端？
	优点：
	1.全局对象，多处可用
	2.对象唯一，不用重复创建
	3.对象单一性，保证了属性和功能入口的唯一性
	缺点：
	1.使用的不确定性导致无法销毁
	2.占用资源、KVO和通知对象无法移除
	3.不利于统一管理，过于分散
4.如何把异步线程转换成同步任务进行单元测试？
5.介绍下APP启动的完成过程？
6.APP启动过慢的可能因素有哪些？
7.0x8badf00d表示什么？	
	应用程序启动崩溃，Exception Codes:0x8badfood
	原因：程序启动时间不能超过5-6秒
	解决：UIApplicationDelegate中不要有耗时操作，或者把耗时操作异步处理。

8.怎么防止反编译？
9.说说你遇到的技术难点？
10.说说你了解的第三方原理或底层知识？

1.介绍下内存的几大区域？
	堆区： ARC
	栈区：自动释放
	全局区：全局变量或静态变量
2.你是如何组件化解耦的？
3.runtime如何通过selector找到对应的IMP地址？
4.runloop内部实现逻辑？
5.你理解的多线程？
6.GCD执行原理？
7.怎么防止别人动态在你程序生成代码？
8.YYAsyncLayer如何异步绘制？
9.优化你是从哪几方面着手？