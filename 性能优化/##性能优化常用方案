##性能优化常用方案：

1.优化业务流程

2.合理的线程分配
	问题：
	1.子线程开的越多，内存开销也越大
	2.多线程下，网络回调的时序问题，导致数据错乱
	建议：
	1.UI操作和DataSource的操作一定在主线程
	2.DB操作、日志记录、网络回调都在各自的固定线程
	3.不同业务，可以通过创建队列保证数据一致性。例如数据的加载和下载
	目的：
	保证主线程尽量少的处理非UI操作，同时控制整个APP的子线程在合理的范围内。
	- FaceBook推出的AsyncDispalyKit就是保证可以在非主线程中进行的任务尽量安排到其它线程中处理，并控制好执行时序，以提高界面流畅性的框架

3.预处理和延时加载
	对于一次加载耗时较长的情况。

4.缓存
	注意点:
	1.并发访问cache时，数据一致性问题
	2.cache线程安全问题，防止一边修改一边遍历的crash
	3.cache查找性能问题
	4.cache的释放与重建，避免占用空间无限扩大，同时释放的粒度也要依照实际情况而定

5.使用正确的API，选择性能更优的API
	例如：
	1.选择合适的容器
	2.imageNamed:适用于加载重复的小图片，系统会自动缓存加载的图片。imageWithContentsOfFile;仅加载图片
	3.缓存NSDateFormatter的结果
	4.寻找(NSDate*)dateFromString:(NSString*)string的替代品

		//#inclue <time.h>
		time_t t;
		struct tm tm;
		trptime([ios8601Strring cStringUsingEncoding:NSUTF8StringEncoding], "%Y-%m-%dT%H:%M:%S%z", &tm);
		tm.tm_isdst = -1;
		t = mktime(&tm);
		[NSDate dateWithTimeIntervalSince1970:t + [[NSTimeZone localTimeZone] secondsFromGMT]];

	5.不要随意使用NSLog（）
	6.当试图读取磁盘上的文件属性信息时，使用[NSFileManager attributesOfItemAtPath:error:]会浪费大量时间读取可能分别不需要的附加属性。这是可以使用stat代替NSFileManager,直接获取文件属性：

		#import <sys/stat.h>
		struct stat statbuf;
		const char *cpath = [filePath fileSystemRepresentation];
		if(cpath && stat(cpath, &statbuf) == 0){
			NSNumber *fileSize = [NSNumber numberWithUNdignedLongLong:statbuf.st_size];
			NSDate *modificationDate = [NSDate dateWithTimeIntervalSince1970:statbuf.st_mtime];
			NSDate *createData = [NSDate dateWithTimeIntervalSince1970:statbuf.st_ctime];
		}

如何预防性能问题：

1.内存泄露检测

MLeaksFinder:可以检测UIViewController和UIView对象的内存泄露，也可以扩展以检查其它对象的内存泄漏。

2.FPS/SQL性能检测工具条

3.UI/DataSource主线程检测工具

